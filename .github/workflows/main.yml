name: Main

on:
  push:
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  build-test:
    name: Build and test (${{ matrix.os }})

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - uses: swatinem/rust-cache@v2
      - name: Build
        run: >
          cargo build
          --locked
          --verbose

      - name: Run tests (without coverage)
        run: >
          cargo test
          --verbose

  build-test-coverage:
    name: Build and test with coverage

    runs-on: ubuntu-latest

    # Currently broken... linking with `cc`/`ld` fails, no idea...
    if: false

    steps:
      - uses: actions/checkout@v4

      - name: Install cargo-tarpaulin (for coverage)
        # As recommened by `cargo-binstall` team:
        # https://github.com/cargo-bins/cargo-binstall/tree/d5549ce99ebc82b1ceee93a41375137b7dbd1a1f#faq
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-tarpaulin

      - name: Install (minimal) nightly toolchain
        run: rustup toolchain install --profile minimal nightly

      - name: Run tests (with coverage)
        # `--all-targets` does not include `--doc`
        run: >
          cargo tarpaulin
          --out xml
          --engine llvm
          --all-targets
          --doc

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3

  release-please:
    name: Execute release chores

    runs-on: ubuntu-latest

    outputs:
      created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}

    steps:
      # https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/making-authenticated-api-requests-with-a-github-app-in-a-github-actions-workflow
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          # Token needs: `contents: write`, `pull-requests: write`
          token: ${{ steps.app-token.outputs.token }}
          release-type: rust

  build-upload:
    name: Build and upload binaries

    needs: release-please
    # Assumption: if release created, tests ran in corresponding PR, so it's safe to not
    # `needs` tests here.
    if: needs.release-please.outputs.created

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            crate: srgn
            binary: srgn
            extension: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            crate: srgn
            binary: srgn
            extension: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            crate: srgn
            binary: srgn
            extension: ".exe"

    runs-on: ${{ matrix.os }}

    env:
      ASSET_FILE: "${{ matrix.crate }}-${{ matrix.target }}-${{ needs.release-please.outputs.tag_name }}.tgz"

    permissions:
      contents: write # For `gh` to upload asset to release

    steps:
      - uses: actions/checkout@v4
      - uses: swatinem/rust-cache@v2
      - name: Build
        shell: bash
        run: >
          cargo build
          --release
          --locked
          --verbose
          --target ${{ matrix.target }}
          --bin ${{ matrix.binary }}

      - name: Package binary (for cargo-binstall)
        shell: bash
        env:
          DIR: ${{ matrix.crate }}
        run: >
          mkdir "$DIR"
          && mv
          "target/${{ matrix.target }}/release/${{ matrix.binary }}${{ matrix.extension }}"
          "$DIR"
          && tar
          --create
          --verbose
          --gzip
          --file "$ASSET_FILE"
          "$DIR"

      - name: Upload binary artifact
        # Why? So should any later steps fail, we can recover the artifact (and attach
        # to release manually, for example).
        uses: actions/upload-artifact@v3
        with:
          name: "$ASSET_FILE"
          path: "$ASSET_FILE"

      - name: Attach binary to release
        shell: bash
        env:
          # `gh` blows up without token, cf.
          # https://josh-ops.com/posts/gh-auth-login-in-actions/#example-2---env-variable
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          gh release upload
          ${{ needs.release-please.outputs.tag_name }}
          "$ASSET_FILE"

  publish:
    name: Publish to crates.io

    runs-on: ubuntu-latest
    needs:
      - release-please
    # Assumption: if release created, tests ran in corresponding PR, so it's safe to not
    # `needs` tests here.
    if: needs.release-please.outputs.created

    environment: crates.io

    steps:
      - uses: actions/checkout@v4
      - uses: swatinem/rust-cache@v2

      - name: Publish
        # https://doc.rust-lang.org/cargo/reference/config.html?highlight=CARGO_REGISTRY_TOKEN#credentials
        run: >
          cargo publish
          --verbose
          --locked
          --no-verify
          --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
