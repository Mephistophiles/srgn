---
source: tests/langs/mod.rs
expression: inscope_parts
---
- n: 5
  l: "import asyncio\n"
  m: "       ^^^^^^^  "
- n: 6
  l: "import os as operating_system\n"
  m: "       ^^                      "
- n: 6
  l: "import os as operating_system\n"
  m: "             ^^^^^^^^^^^^^^^^  "
- n: 7
  l: "from collections import namedtuple\n"
  m: "     ^^^^^^^^^^^                    "
- n: 7
  l: "from collections import namedtuple\n"
  m: "                        ^^^^^^^^^^  "
- n: 8
  l: "from math import *\n"
  m: "     ^^^^           "
- n: 9
  l: "from math import acos as soca\n"
  m: "     ^^^^                      "
- n: 9
  l: "from math import acos as soca\n"
  m: "                 ^^^^          "
- n: 9
  l: "from math import acos as soca\n"
  m: "                         ^^^^  "
- n: 10
  l: "from typing import Dict, List\n"
  m: "     ^^^^^^                    "
- n: 10
  l: "from typing import Dict, List\n"
  m: "                   ^^^^        "
- n: 10
  l: "from typing import Dict, List\n"
  m: "                         ^^^^  "
- n: 12
  l: "from ..parent import x\n"
  m: "       ^^^^^^           "
- n: 12
  l: "from ..parent import x\n"
  m: "                     ^  "
- n: 13
  l: "from .sibling import y\n"
  m: "      ^^^^^^^           "
- n: 13
  l: "from .sibling import y\n"
  m: "                     ^  "
- n: 16
  l: "test_var: int = 10\n"
  m: "^^^^^^^^            "
- n: 16
  l: "test_var: int = 10\n"
  m: "          ^^^       "
- n: 20
  l: "def free_func():\n"
  m: "    ^^^^^^^^^     "
- n: 22
  l: "    global test_var\n"
  m: "           ^^^^^^^^  "
- n: 23
  l: "    test_var += 1\n"
  m: "    ^^^^^^^^       "
- n: 24
  l: "    print(f\"Global test_var is now {test_var}\")\n"
  m: "    ^^^^^                                          "
- n: 24
  l: "    print(f\"Global test_var is now {test_var}\")\n"
  m: "                                     ^^^^^^^^      "
- n: 28
  l: "def func_decorator(func):\n"
  m: "    ^^^^^^^^^^^^^^         "
- n: 28
  l: "def func_decorator(func):\n"
  m: "                   ^^^^    "
- n: 31
  l: "    def wrapper(*args, **kwargs):\n"
  m: "        ^^^^^^^                    "
- n: 31
  l: "    def wrapper(*args, **kwargs):\n"
  m: "                 ^^^^              "
- n: 31
  l: "    def wrapper(*args, **kwargs):\n"
  m: "                         ^^^^^^    "
- n: 32
  l: "        print(\"Function decorator called\")\n"
  m: "        ^^^^^                                 "
- n: 33
  l: "        return func(*args, **kwargs)\n"
  m: "               ^^^^                   "
- n: 33
  l: "        return func(*args, **kwargs)\n"
  m: "                     ^^^^             "
- n: 33
  l: "        return func(*args, **kwargs)\n"
  m: "                             ^^^^^^   "
- n: 35
  l: "    return wrapper\n"
  m: "           ^^^^^^^  "
- n: 38
  l: "@func_decorator\n"
  m: " ^^^^^^^^^^^^^^  "
- n: 39
  l: "def decorated_func():\n"
  m: "    ^^^^^^^^^^^^^^     "
- n: 41
  l: "    print(\"Inside decorated function\")\n"
  m: "    ^^^^^                                 "
- n: 45
  l: "class TestClass:\n"
  m: "      ^^^^^^^^^   "
- n: 48
  l: "    class_var = \"Class variable\"\n"
  m: "    ^^^^^^^^^                       "
- n: 51
  l: "    @staticmethod\n"
  m: "     ^^^^^^^^^^^^  "
- n: 52
  l: "    def static_decorator(func):\n"
  m: "        ^^^^^^^^^^^^^^^^         "
- n: 52
  l: "    def static_decorator(func):\n"
  m: "                         ^^^^    "
- n: 55
  l: "        def wrapper(*args, **kwargs):\n"
  m: "            ^^^^^^^                    "
- n: 55
  l: "        def wrapper(*args, **kwargs):\n"
  m: "                     ^^^^              "
- n: 55
  l: "        def wrapper(*args, **kwargs):\n"
  m: "                             ^^^^^^    "
- n: 56
  l: "            print(\"Static method decorator called\")\n"
  m: "            ^^^^^                                      "
- n: 57
  l: "            return func(*args, **kwargs)\n"
  m: "                   ^^^^                   "
- n: 57
  l: "            return func(*args, **kwargs)\n"
  m: "                         ^^^^             "
- n: 57
  l: "            return func(*args, **kwargs)\n"
  m: "                                 ^^^^^^   "
- n: 59
  l: "        return wrapper\n"
  m: "               ^^^^^^^  "
- n: 62
  l: "    @classmethod\n"
  m: "     ^^^^^^^^^^^  "
- n: 63
  l: "    def class_method(cls) -> None:\n"
  m: "        ^^^^^^^^^^^^                "
- n: 63
  l: "    def class_method(cls) -> None:\n"
  m: "                     ^^^            "
- n: 65
  l: "        cls.class_var += \" updated\"\n"
  m: "        ^^^                            "
- n: 65
  l: "        cls.class_var += \" updated\"\n"
  m: "            ^^^^^^^^^                  "
- n: 66
  l: "        print(f\"Class variable is now {cls.class_var}\")\n"
  m: "        ^^^^^                                              "
- n: 66
  l: "        print(f\"Class variable is now {cls.class_var}\")\n"
  m: "                                        ^^^                "
- n: 66
  l: "        print(f\"Class variable is now {cls.class_var}\")\n"
  m: "                                            ^^^^^^^^^      "
- n: 69
  l: "    def instance_method(self) -> None:\n"
  m: "        ^^^^^^^^^^^^^^^                 "
- n: 69
  l: "    def instance_method(self) -> None:\n"
  m: "                        ^^^^            "
- n: 71
  l: "        self.instance_var = \"Instance variable\"\n"
  m: "        ^^^^                                       "
- n: 71
  l: "        self.instance_var = \"Instance variable\"\n"
  m: "             ^^^^^^^^^^^^                          "
- n: 72
  l: "        print(f\"Instance variable is {self.instance_var}\")\n"
  m: "        ^^^^^                                                 "
- n: 72
  l: "        print(f\"Instance variable is {self.instance_var}\")\n"
  m: "                                       ^^^^                   "
- n: 72
  l: "        print(f\"Instance variable is {self.instance_var}\")\n"
  m: "                                            ^^^^^^^^^^^^      "
- n: 74
  l: "    @staticmethod\n"
  m: "     ^^^^^^^^^^^^  "
- n: 75
  l: "    @static_decorator\n"
  m: "     ^^^^^^^^^^^^^^^^  "
- n: 76
  l: "    def static_method() -> None:\n"
  m: "        ^^^^^^^^^^^^^             "
- n: 78
  l: "        print(\"Inside static method\")\n"
  m: "        ^^^^^                            "
- n: 82
  l: "square = lambda x: x * x\n"
  m: "^^^^^^                    "
- n: 82
  l: "square = lambda x: x * x\n"
  m: "                ^         "
- n: 82
  l: "square = lambda x: x * x\n"
  m: "                   ^      "
- n: 82
  l: "square = lambda x: x * x\n"
  m: "                       ^  "
- n: 85
  l: "multi_line_str = \"\"\"\n"
  m: "^^^^^^^^^^^^^^           "
- n: 91
  l: "multiline_f_string = f\"\"\"This is a\n"
  m: "^^^^^^^^^^^^^^^^^^                     "
- n: 92
  l: "multiline{f_string} string\n"
  m: "          ^^^^^^^^          "
- n: 96
  l: "raw_string = r\"This is a raw string with no special treatment for \\n\"\n"
  m: "^^^^^^^^^^                                                                "
- n: 97
  l: "bytes_string = b\"This is a bytes string\"\n"
  m: "^^^^^^^^^^^^                                "
- n: 98
  l: "bytes_string = rf\"This is a raw f-string with {raw_string}\"\n"
  m: "^^^^^^^^^^^^                                                   "
- n: 98
  l: "bytes_string = rf\"This is a raw f-string with {raw_string}\"\n"
  m: "                                                ^^^^^^^^^^     "
- n: 102
  l: "squared_numbers = [\"x\" + square(x) for x in range(10)]\n"
  m: "^^^^^^^^^^^^^^^                                           "
- n: 102
  l: "squared_numbers = [\"x\" + square(x) for x in range(10)]\n"
  m: "                           ^^^^^^                         "
- n: 102
  l: "squared_numbers = [\"x\" + square(x) for x in range(10)]\n"
  m: "                                  ^                       "
- n: 102
  l: "squared_numbers = [\"x\" + square(x) for x in range(10)]\n"
  m: "                                         ^                "
- n: 102
  l: "squared_numbers = [\"x\" + square(x) for x in range(10)]\n"
  m: "                                              ^^^^^       "
- n: 105
  l: "unique_squares = {square(x) for x in range(10)}\n"
  m: "^^^^^^^^^^^^^^                                   "
- n: 105
  l: "unique_squares = {square(x) for x in range(10)}\n"
  m: "                  ^^^^^^                         "
- n: 105
  l: "unique_squares = {square(x) for x in range(10)}\n"
  m: "                         ^                       "
- n: 105
  l: "unique_squares = {square(x) for x in range(10)}\n"
  m: "                                ^                "
- n: 105
  l: "unique_squares = {square(x) for x in range(10)}\n"
  m: "                                     ^^^^^       "
- n: 108
  l: "squares_dict = {x: square(x) for x in range(10)}\n"
  m: "^^^^^^^^^^^^                                      "
- n: 108
  l: "squares_dict = {x: square(x) for x in range(10)}\n"
  m: "                ^                                 "
- n: 108
  l: "squares_dict = {x: square(x) for x in range(10)}\n"
  m: "                   ^^^^^^                         "
- n: 108
  l: "squares_dict = {x: square(x) for x in range(10)}\n"
  m: "                          ^                       "
- n: 108
  l: "squares_dict = {x: square(x) for x in range(10)}\n"
  m: "                                 ^                "
- n: 108
  l: "squares_dict = {x: square(x) for x in range(10)}\n"
  m: "                                      ^^^^^       "
- n: 112
  l: "def exception_handling(x) -> None:\n"
  m: "    ^^^^^^^^^^^^^^^^^^              "
- n: 112
  l: "def exception_handling(x) -> None:\n"
  m: "                       ^            "
- n: 115
  l: "        if x < 0:\n"
  m: "           ^       "
- n: 116
  l: "            raise ValueError(\"Negative value\")\n"
  m: "                  ^^^^^^^^^^                      "
- n: 117
  l: "        elif x == 0:\n"
  m: "             ^        "
- n: 118
  l: "            raise ZeroDivisionError(\"Division by zero\")\n"
  m: "                  ^^^^^^^^^^^^^^^^^                        "
- n: 119
  l: "        result = 10 / x\n"
  m: "        ^^^^^^           "
- n: 119
  l: "        result = 10 / x\n"
  m: "                      ^  "
- n: 120
  l: "    except ZeroDivisionError as e:\n"
  m: "           ^^^^^^^^^^^^^^^^^        "
- n: 120
  l: "    except ZeroDivisionError as e:\n"
  m: "                                ^   "
- n: 121
  l: "        print(f\"Caught an exception: {e}\")\n"
  m: "        ^^^^^                                 "
- n: 121
  l: "        print(f\"Caught an exception: {e}\")\n"
  m: "                                       ^      "
- n: 122
  l: "    except ValueError as e:\n"
  m: "           ^^^^^^^^^^        "
- n: 122
  l: "    except ValueError as e:\n"
  m: "                         ^   "
- n: 123
  l: "        print(f\"Caught an exception: {e}\")\n"
  m: "        ^^^^^                                 "
- n: 123
  l: "        print(f\"Caught an exception: {e}\")\n"
  m: "                                       ^      "
- n: 125
  l: "        print(\"No exceptions caught\")\n"
  m: "        ^^^^^                            "
- n: 127
  l: "        print(\"This will always be printed\")\n"
  m: "        ^^^^^                                   "
- n: 131
  l: "def modify_nonlocal():\n"
  m: "    ^^^^^^^^^^^^^^^     "
- n: 133
  l: "    nonlocal_var = \"Initial value\"\n"
  m: "    ^^^^^^^^^^^^                      "
- n: 135
  l: "    def inner():\n"
  m: "        ^^^^^     "
- n: 136
  l: "        nonlocal nonlocal_var\n"
  m: "                 ^^^^^^^^^^^^  "
- n: 137
  l: "        nonlocal_var = \"Modified value\"\n"
  m: "        ^^^^^^^^^^^^                       "
- n: 139
  l: "    inner()\n"
  m: "    ^^^^^    "
- n: 140
  l: "    print(f\"Nonlocal variable is {nonlocal_var}\")\n"
  m: "    ^^^^^                                            "
- n: 140
  l: "    print(f\"Nonlocal variable is {nonlocal_var}\")\n"
  m: "                                   ^^^^^^^^^^^^      "
- n: 143
  l: "def inplace_operations():\n"
  m: "    ^^^^^^^^^^^^^^^^^^     "
- n: 145
  l: "    x = 10\n"
  m: "    ^       "
- n: 146
  l: "    x += 5\n"
  m: "    ^       "
- n: 147
  l: "    x -= 3\n"
  m: "    ^       "
- n: 148
  l: "    x *= 2\n"
  m: "    ^       "
- n: 149
  l: "    x /= 4\n"
  m: "    ^       "
- n: 150
  l: "    print(f\"Inplace operations result: {x}\")\n"
  m: "    ^^^^^                                       "
- n: 150
  l: "    print(f\"Inplace operations result: {x}\")\n"
  m: "                                         ^      "
- n: 154
  l: "def control_flow():\n"
  m: "    ^^^^^^^^^^^^     "
- n: 157
  l: "    if test_var > 5:\n"
  m: "       ^^^^^^^^       "
- n: 158
  l: "        print(\"test_var is greater than 5\")\n"
  m: "        ^^^^^                                  "
- n: 160
  l: "        print(\"test_var is 5 or less\")\n"
  m: "        ^^^^^                             "
- n: 163
  l: "    counter = 0\n"
  m: "    ^^^^^^^      "
- n: 164
  l: "    while counter < 3:\n"
  m: "          ^^^^^^^       "
- n: 165
  l: "        print(f\"Counter is {counter}\")\n"
  m: "        ^^^^^                             "
- n: 165
  l: "        print(f\"Counter is {counter}\")\n"
  m: "                             ^^^^^^^      "
- n: 166
  l: "        counter += 1\n"
  m: "        ^^^^^^^       "
- n: 169
  l: "    for i in range(3):\n"
  m: "        ^               "
- n: 169
  l: "    for i in range(3):\n"
  m: "             ^^^^^      "
- n: 170
  l: "        print(f\"Loop iteration {i}\")\n"
  m: "        ^^^^^                           "
- n: 170
  l: "        print(f\"Loop iteration {i}\")\n"
  m: "                                 ^      "
- n: 173
  l: "    with open(__file__) as f:\n"
  m: "         ^^^^                  "
- n: 173
  l: "    with open(__file__) as f:\n"
  m: "              ^^^^^^^^         "
- n: 173
  l: "    with open(__file__) as f:\n"
  m: "                           ^   "
- n: 174
  l: "        content = f.readline()\n"
  m: "        ^^^^^^^                 "
- n: 174
  l: "        content = f.readline()\n"
  m: "                  ^             "
- n: 174
  l: "        content = f.readline()\n"
  m: "                    ^^^^^^^^    "
- n: 175
  l: "        print(\"Read from file:\", content)\n"
  m: "        ^^^^^                                "
- n: 175
  l: "        print(\"Read from file:\", content)\n"
  m: "                                   ^^^^^^^   "
- n: 179
  l: "def match_statement(x):\n"
  m: "    ^^^^^^^^^^^^^^^      "
- n: 179
  l: "def match_statement(x):\n"
  m: "                    ^    "
- n: 181
  l: "    match x:\n"
  m: "          ^   "
- n: 183
  l: "            print(\"Zero\")\n"
  m: "            ^^^^^            "
- n: 185
  l: "            print(\"One\")\n"
  m: "            ^^^^^           "
- n: 187
  l: "            print(\"Other\")\n"
  m: "            ^^^^^             "
- n: 191
  l: "async def async_function():\n"
  m: "          ^^^^^^^^^^^^^^     "
- n: 193
  l: "    await asyncio.sleep(1)\n"
  m: "          ^^^^^^^           "
- n: 193
  l: "    await asyncio.sleep(1)\n"
  m: "                  ^^^^^     "
- n: 194
  l: "    print(\"Async function executed\")\n"
  m: "    ^^^^^                               "
- n: 198
  l: "if __name__ == \"__main__\":\n"
  m: "   ^^^^^^^^                   "
- n: 199
  l: "    free_func()\n"
  m: "    ^^^^^^^^^    "
- n: 200
  l: "    decorated_func()\n"
  m: "    ^^^^^^^^^^^^^^    "
- n: 201
  l: "    TestClass.class_method()\n"
  m: "    ^^^^^^^^^                 "
- n: 201
  l: "    TestClass.class_method()\n"
  m: "              ^^^^^^^^^^^^    "
- n: 202
  l: "    instance = TestClass()\n"
  m: "    ^^^^^^^^                "
- n: 202
  l: "    instance = TestClass()\n"
  m: "               ^^^^^^^^^    "
- n: 203
  l: "    instance.instance_method()\n"
  m: "    ^^^^^^^^                    "
- n: 203
  l: "    instance.instance_method()\n"
  m: "             ^^^^^^^^^^^^^^^    "
- n: 204
  l: "    TestClass.static_method()\n"
  m: "    ^^^^^^^^^                  "
- n: 204
  l: "    TestClass.static_method()\n"
  m: "              ^^^^^^^^^^^^^    "
- n: 205
  l: "    print(square(5))\n"
  m: "    ^^^^^             "
- n: 205
  l: "    print(square(5))\n"
  m: "          ^^^^^^      "
- n: 206
  l: "    exception_handling(0)\n"
  m: "    ^^^^^^^^^^^^^^^^^^     "
- n: 207
  l: "    modify_nonlocal()\n"
  m: "    ^^^^^^^^^^^^^^^    "
- n: 208
  l: "    inplace_operations()\n"
  m: "    ^^^^^^^^^^^^^^^^^^    "
- n: 209
  l: "    control_flow()\n"
  m: "    ^^^^^^^^^^^^    "
- n: 210
  l: "    match_statement(1)\n"
  m: "    ^^^^^^^^^^^^^^^     "
- n: 211
  l: "    asyncio.run(async_function())\n"
  m: "    ^^^^^^^                        "
- n: 211
  l: "    asyncio.run(async_function())\n"
  m: "            ^^^                    "
- n: 211
  l: "    asyncio.run(async_function())\n"
  m: "                ^^^^^^^^^^^^^^     "
