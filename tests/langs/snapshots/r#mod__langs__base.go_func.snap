---
source: tests/langs/mod.rs
expression: inscope_parts
---
- n: 36
  l: "func (e *TestError) Error() string {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 37
  l: "\treturn e.message\n"
  m: ^^^^^^^^^^^^^^^^^^^^
- n: 38
  l: "}\n"
  m: "^  "
- n: 84
  l: "func Max[T int | float64](a, b T) T {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 85
  l: "\tif a > b {\n"
  m: ^^^^^^^^^^^^^^
- n: 86
  l: "\t\treturn a\n"
  m: ^^^^^^^^^^^^^^
- n: 87
  l: "\t}\n"
  m: ^^^^^
- n: 88
  l: "\treturn b\n"
  m: ^^^^^^^^^^^^
- n: 89
  l: "}\n"
  m: "^  "
- n: 92
  l: "func (tc *TestCase) Run(t *testing.T) {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 93
  l: "\t// Method implementation\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 94
  l: "}\n"
  m: "^  "
- n: 97
  l: "func runTests(t *testing.T, tests ...TestFunction) {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 98
  l: "\tfor _, test := range tests {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 99
  l: "\t\ttest(t)\n"
  m: ^^^^^^^^^^^^^
- n: 100
  l: "\t}\n"
  m: ^^^^^
- n: 101
  l: "}\n"
  m: "^  "
- n: 104
  l: "func TestMain(m *testing.M) {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 105
  l: "\t// Setup\n"
  m: ^^^^^^^^^^^^
- n: 106
  l: "\tdefer func() {\n"
  m: ^^^^^^^^^^^^^^^^^^
- n: 107
  l: "\t\t// Defer statement\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^
- n: 108
  l: "\t\tfmt.Println(\"Cleanup after tests\")\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 109
  l: "\t}()\n"
  m: ^^^^^^^
- n: 110
  l: "\n"
  m: ^^
- n: 111
  l: "\t// Run tests\n"
  m: ^^^^^^^^^^^^^^^^
- n: 112
  l: "\tm.Run()\n"
  m: ^^^^^^^^^^^
- n: 113
  l: "}\n"
  m: "^  "
- n: 116
  l: "func TestSample(t *testing.T) {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 117
  l: "\t// Short variable declaration\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 118
  l: "\tx := 42\n"
  m: ^^^^^^^^^^^
- n: 119
  l: "\n"
  m: ^^
- n: 120
  l: "\t// If statement\n"
  m: ^^^^^^^^^^^^^^^^^^^
- n: 121
  l: "\tif x > 0 {\n"
  m: ^^^^^^^^^^^^^^
- n: 122
  l: "\t\tt.Log(\"Positive number\")\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 123
  l: "\t} else {\n"
  m: ^^^^^^^^^^^^
- n: 124
  l: "\t\tt.Error(\"Non-positive number\")\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 125
  l: "\t}\n"
  m: ^^^^^
- n: 126
  l: "\n"
  m: ^^
- n: 127
  l: "\t// Switch statement\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^
- n: 128
  l: "\tswitch {\n"
  m: ^^^^^^^^^^^^
- n: 129
  l: "\tcase x < 0:\n"
  m: ^^^^^^^^^^^^^^^
- n: 130
  l: "\t\tt.Error(\"Negative number\")\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 131
  l: "\tcase x == 0:\n"
  m: ^^^^^^^^^^^^^^^^
- n: 132
  l: "\t\tt.Error(\"Zero\")\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^
- n: 133
  l: "\tdefault:\n"
  m: ^^^^^^^^^^^^
- n: 134
  l: "\t\tt.Log(\"Positive number\")\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 135
  l: "\t}\n"
  m: ^^^^^
- n: 136
  l: "\n"
  m: ^^
- n: 137
  l: "\t// For loop\n"
  m: ^^^^^^^^^^^^^^^
- n: 138
  l: "\tsum := 0\n"
  m: ^^^^^^^^^^^^
- n: 139
  l: "\tfor i := 1; i <= 10; i++ {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 140
  l: "\t\tsum += i\n"
  m: ^^^^^^^^^^^^^^
- n: 141
  l: "\t}\n"
  m: ^^^^^
- n: 142
  l: "\n"
  m: ^^
- n: 143
  l: "\t// Assert\n"
  m: ^^^^^^^^^^^^^
- n: 144
  l: "\tif sum != 55 {\n"
  m: ^^^^^^^^^^^^^^^^^^
- n: 145
  l: "\t\tt.Errorf(\"Expected sum to be 55, got %d\", sum)\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 146
  l: "\t}\n"
  m: ^^^^^
- n: 147
  l: "\n"
  m: ^^
- n: 148
  l: "\t// Goroutine and channel usage\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 149
  l: "\tgo func() {\n"
  m: ^^^^^^^^^^^^^^^
- n: 150
  l: "\t\ttestChannel <- TestCase{Name: \"async test\", Input: 1, Expected: 1}\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 151
  l: "\t}()\n"
  m: ^^^^^^^
- n: 152
  l: "\n"
  m: ^^
- n: 153
  l: "\t// Select statement\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^
- n: 154
  l: "\tselect {\n"
  m: ^^^^^^^^^^^^
- n: 155
  l: "\tcase tc := <-testChannel:\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 156
  l: "\t\tt.Logf(\"Received test case: %s\", tc.Name)\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 157
  l: "\tcase <-time.After(1 * time.Second):\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 158
  l: "\t\tt.Error(\"Timeout waiting for test case\")\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 159
  l: "\t}\n"
  m: ^^^^^
- n: 160
  l: "\n"
  m: ^^
- n: 161
  l: "\t// Panic and recover\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^
- n: 162
  l: "\tdefer func() {\n"
  m: ^^^^^^^^^^^^^^^^^^
- n: 163
  l: "\t\tif r := recover(); r != nil {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 164
  l: "\t\t\tt.Log(\"Recovered from panic:\", r)\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 165
  l: "\t\t}\n"
  m: ^^^^^^^
- n: 166
  l: "\t}()\n"
  m: ^^^^^^^
- n: 167
  l: "\n"
  m: ^^
- n: 168
  l: "\t// Intentional panic\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^
- n: 169
  l: "\tif debugMode {\n"
  m: ^^^^^^^^^^^^^^^^^^
- n: 170
  l: "\t\tpanic(\"This is a debug panic\")\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 171
  l: "\t}\n"
  m: ^^^^^
- n: 172
  l: "}\n"
  m: "^  "
- n: 175
  l: "func BenchmarkSample(b *testing.B) {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 176
  l: "\tfor i := 0; i < b.N; i++ {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 177
  l: "\t\t_ = math.Sqrt(float64(i))\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 178
  l: "\t}\n"
  m: ^^^^^
- n: 179
  l: "}\n"
  m: "^  "
- n: 182
  l: "func ExampleTestCase_Run() {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 183
  l: "\ttc := TestCase{Name: \"example\", Input: 2, Expected: 4}\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 184
  l: "\tfmt.Printf(\"Running test case: %s\\n\", tc.Name)\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 185
  l: "\t// Output: Running test case: example\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 186
  l: "}\n"
  m: "^  "
- n: 189
  l: "func processValue(v interface{}) {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 190
  l: "\tswitch x := v.(type) {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 191
  l: "\tcase int:\n"
  m: ^^^^^^^^^^^^^
- n: 192
  l: "\t\tfmt.Printf(\"Integer: %d\\n\", x)\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 193
  l: "\tcase string:\n"
  m: ^^^^^^^^^^^^^^^^
- n: 194
  l: "\t\turlValue, err := u.Parse(x)\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 195
  l: "\t\tif err == nil {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^
- n: 196
  l: "\t\t\tfmt.Printf(\"URL: %s\\n\", urlValue)\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 197
  l: "\t\t} else {\n"
  m: ^^^^^^^^^^^^^^
- n: 198
  l: "\t\t\tfmt.Printf(\"String: %s\\n\", x)\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 199
  l: "\t\t}\n"
  m: ^^^^^^^
- n: 200
  l: "\tdefault:\n"
  m: ^^^^^^^^^^^^
- n: 201
  l: "\t\tfmt.Printf(\"Unknown type: %T\\n\", x)\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 202
  l: "\t}\n"
  m: ^^^^^
- n: 203
  l: "}\n"
  m: "^  "
- n: 206
  l: "func createMultiplier(factor int) func(int) int {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 207
  l: "\treturn func(x int) int {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 208
  l: "\t\treturn x * factor\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^
- n: 209
  l: "\t}\n"
  m: ^^^^^
- n: 210
  l: "}\n"
  m: "^  "
- n: 236
  l: "func longRunningOperation(ctx context.Context) error {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 237
  l: "\tselect {\n"
  m: ^^^^^^^^^^^^
- n: 238
  l: "\tcase <-time.After(5 * time.Second):\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 239
  l: "\t\treturn nil\n"
  m: ^^^^^^^^^^^^^^^^
- n: 240
  l: "\tcase <-ctx.Done():\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^
- n: 241
  l: "\t\treturn ctx.Err()\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^
- n: 242
  l: "\t}\n"
  m: ^^^^^
- n: 243
  l: "}\n"
  m: "^  "
- n: 246
  l: "func inspectType(x interface{}) {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 247
  l: "\tt := reflect.TypeOf(x)\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 248
  l: "\tfmt.Printf(\"Type: %v, Kind: %v\\n\", t, t.Kind())\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 249
  l: "}\n"
  m: "^  "
- n: 252
  l: "func unsafePointerExample() {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 253
  l: "\tx := [4]int{1, 2, 3, 4}\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 254
  l: "\tp := unsafe.Pointer(&x)\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 255
  l: "\tfmt.Printf(\"First element: %d\\n\", *(*int)(p))\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 256
  l: "}\n"
  m: "^  "
- n: 259
  l: "func init() {\n"
  m: ^^^^^^^^^^^^^^^
- n: 260
  l: "\tfmt.Println(\"Initializing package\")\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 261
  l: "}\n"
  m: "^  "
- n: 273
  l: "func fallThroughExample(x int) string {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 274
  l: "\tswitch x {\n"
  m: ^^^^^^^^^^^^^^
- n: 275
  l: "\tcase 0:\n"
  m: ^^^^^^^^^^^
- n: 276
  l: "\t\tfallthrough\n"
  m: ^^^^^^^^^^^^^^^^^
- n: 277
  l: "\tcase 1:\n"
  m: ^^^^^^^^^^^
- n: 278
  l: "\t\treturn \"Low\"\n"
  m: ^^^^^^^^^^^^^^^^^^^^
- n: 279
  l: "\tcase 2:\n"
  m: ^^^^^^^^^^^
- n: 280
  l: "\t\treturn \"Medium\"\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^
- n: 281
  l: "\tdefault:\n"
  m: ^^^^^^^^^^^^
- n: 282
  l: "\t\treturn \"High\"\n"
  m: ^^^^^^^^^^^^^^^^^^^^^
- n: 283
  l: "\t}\n"
  m: ^^^^^
- n: 284
  l: "}\n"
  m: "^  "
- n: 287
  l: "func labelAndGotoExample() {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 288
  l: "\ti := 0\n"
  m: ^^^^^^^^^^
- n: 289
  l: "Loop:\n"
  m: ^^^^^^^
- n: 290
  l: "\tif i < 5 {\n"
  m: ^^^^^^^^^^^^^^
- n: 291
  l: "\t\ti++\n"
  m: ^^^^^^^^^
- n: 292
  l: "\t\tgoto Loop\n"
  m: ^^^^^^^^^^^^^^^
- n: 293
  l: "\t}\n"
  m: ^^^^^
- n: 294
  l: "}\n"
  m: "^  "
- n: 319
  l: "func add(a, b int) int {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 320
  l: "\treturn a + b\n"
  m: ^^^^^^^^^^^^^^^^
- n: 321
  l: "}\n"
  m: "^  "
- n: 327
  l: "func (r Rectangle) Area() float64 {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 328
  l: "\tmul := func(a, b float64) float64 {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 329
  l: "\t\treturn a * b\n"
  m: ^^^^^^^^^^^^^^^^^^
- n: 330
  l: "\t}\n"
  m: ^^^^^
- n: 331
  l: "\n"
  m: ^^
- n: 332
  l: "\treturn mul(r.width, r.height)\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 333
  l: "}\n"
  m: "^  "
- n: 335
  l: "func variadic(nums ...int) int {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 336
  l: "\ttotal := 0\n"
  m: ^^^^^^^^^^^^^^
- n: 337
  l: "\tfor _, num := range nums {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 338
  l: "\t\ttotal += num\n"
  m: ^^^^^^^^^^^^^^^^^^
- n: 339
  l: "\t}\n"
  m: ^^^^^
- n: 340
  l: "\treturn total\n"
  m: ^^^^^^^^^^^^^^^^
- n: 341
  l: "}\n"
  m: "^  "
- n: 343
  l: "func higherOrder(f func(int) int, x int) int {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 344
  l: "\treturn f(x)\n"
  m: ^^^^^^^^^^^^^^^
- n: 345
  l: "}\n"
  m: "^  "
- n: 347
  l: "func closure() func() int {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 348
  l: "\tcount := 0\n"
  m: ^^^^^^^^^^^^^^
- n: 349
  l: "\treturn func() int {\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^
- n: 350
  l: "\t\tcount++\n"
  m: ^^^^^^^^^^^^^
- n: 351
  l: "\t\treturn count\n"
  m: ^^^^^^^^^^^^^^^^^^
- n: 352
  l: "\t}\n"
  m: ^^^^^
- n: 353
  l: "}\n"
  m: "^  "
- n: 355
  l: "func init() {\n"
  m: ^^^^^^^^^^^^^^^
- n: 356
  l: "\t// Initialization code here\n"
  m: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- n: 357
  l: "}\n"
  m: "^  "
